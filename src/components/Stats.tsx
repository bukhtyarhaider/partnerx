import {
  ArrowDownRight,
  ArrowUpRight,
  Banknote,
  HeartHandshake,
  DollarSign,
} from "lucide-react";
import { StatCard } from "./StatCard";
import { LoanCard } from "./LoanCard";
import { formatCurrency } from "../utils/format";
import { useBusinessInfo } from "../hooks/useBusinessInfo";

// The main data structure for financial stats
type Financials = {
  totalGrossProfit: number;
  totalNetProfit: number;
  totalExpenses: number;
  companyCapital: number;
  availableDonationsFund: number;
  loan: {
    amount: number;
    owedBy: string | null;
  };
  deficitPartners: Array<{ partnerId: string; amount: number }>;
};

interface StatsProps {
  financials: Financials;
  currentCapital?: number; // Optional override for current capital
  currentDonationsFund?: number; // Optional override for current donations fund
  donationEnabled?: boolean;
}

export const Stats: React.FC<StatsProps> = ({
  financials,
  currentCapital,
  currentDonationsFund,
  donationEnabled = true,
}) => {
  const {
    totalGrossProfit,
    totalNetProfit,
    totalExpenses,
    companyCapital: calculatedCapital,
    loan,
    deficitPartners,
    availableDonationsFund: calculatedDonationsFund,
  } = financials;

  // Use overrides if provided, otherwise use calculated from financials
  // This ensures Current Capital and Donations Fund stay constant across all filters
  const companyCapital = currentCapital ?? calculatedCapital;
  const availableDonationsFund =
    currentDonationsFund ?? calculatedDonationsFund;

  const { isPersonalMode } = useBusinessInfo();

  // Helper function to determine trend based on value
  const getTrend = (value: number): "up" | "down" | "neutral" => {
    if (value > 0) return "up";
    if (value < 0) return "down";
    return "neutral";
  };

  // Helper function to get trend message
  const getTrendMessage = (value: number, type: string): string => {
    if (value === 0) return `No ${type.toLowerCase()} recorded`;
    if (value > 0) return `Positive ${type.toLowerCase()}`;
    return `Negative ${type.toLowerCase()}`;
  };

  // Dynamic labels based on usage type
  const incomeLabel = isPersonalMode ? "Total Income" : "Gross Profit";
  const incomeSubtitle = isPersonalMode ? "All earnings" : "Total revenue";
  const incomeTrend = isPersonalMode ? "Income" : "Profit";
  const incomeInfo = isPersonalMode
    ? "This shows all the money you've earned from various income sources like salary, freelance work, investments, etc. It's your total earnings before any deductions or expenses."
    : "This represents the total revenue generated by your business before any expenses are deducted. It's calculated by summing all income from various sources across all partners based on their equity shares.";

  const expenseLabel = isPersonalMode ? "Total Spending" : "Total Expenses";
  const expenseSubtitle = isPersonalMode ? "All expenses" : "Operational costs";
  const expenseInfo = isPersonalMode
    ? "This shows all your spending including personal expenses, bills, shopping, and any other costs. It helps you track where your money is going."
    : "This includes all business operational costs such as salaries, rent, utilities, equipment, and other expenses. Both personal and shared company expenses are tracked here.";

  const netLabel = isPersonalMode ? "Net Savings" : "Net Earnings";
  const netSubtitle = isPersonalMode ? "Income - Spending" : "After expenses";
  const netTrend = isPersonalMode ? "Savings" : "Earnings";
  const netInfo = isPersonalMode
    ? "This is your total income minus your total spending. A positive number means you're saving money, while a negative number means you're spending more than you earn. This helps you understand if you're living within your means."
    : "This represents the profit after all expenses are deducted from gross profit. It's calculated as Gross Profit minus Total Expenses. This is the actual profit available for distribution among partners or reinvestment.";

  const capitalLabel = isPersonalMode ? "My Balance" : "Current Capital";
  const capitalSubtitle = isPersonalMode
    ? "Available to me"
    : "Available funds";
  const capitalTrend = isPersonalMode ? "Balance" : "Capital";
  const capitalInfo = isPersonalMode
    ? "This is the money currently available to you. It's calculated as your income minus expenses minus any donations or charity. This represents your spendable balance."
    : "This shows the total available funds in the business after accounting for all income, expenses, and donations. It represents the liquid capital available for business operations and partner distributions based on equity shares.";

  const donationInfo = isPersonalMode
    ? "This is money you've set aside for charitable giving. It's tracked separately from your regular balance so you can see how much you've allocated for helping others and making donations."
    : "This fund is specifically allocated for company donations and charitable activities. It's tracked separately to ensure transparency in how the business contributes to social causes. Funds can be distributed based on partner decisions.";

  return (
    <div className="hide-scrollbar -mx-4 flex space-x-3 overflow-x-auto px-4 pt-6 pb-2 md:mx-0 md:grid md:grid-cols-2 md:gap-4 lg:grid-cols-3 lg:gap-6 md:space-x-0 md:px-5 md:py-6 overflow-y-visible">
      <StatCard
        title={incomeLabel}
        value={formatCurrency(totalGrossProfit)}
        icon={<DollarSign className="text-white w-full h-full" />}
        variant="indigo"
        subtitle={incomeSubtitle}
        trend={getTrend(totalGrossProfit)}
        trendValue={getTrendMessage(totalGrossProfit, incomeTrend)}
        emptyMessage={
          isPersonalMode ? "No income recorded yet" : "No profit recorded yet"
        }
        infoText={incomeInfo}
      />
      <StatCard
        title={expenseLabel}
        value={formatCurrency(totalExpenses)}
        icon={<ArrowDownRight className="text-white w-full h-full" />}
        variant="red"
        subtitle={expenseSubtitle}
        trend={totalExpenses > 0 ? "down" : "neutral"}
        trendValue={
          totalExpenses > 0 ? "Expenses incurred" : "No expenses recorded"
        }
        emptyMessage="No expenses recorded"
        infoText={expenseInfo}
      />
      <StatCard
        title={netLabel}
        value={formatCurrency(totalNetProfit)}
        icon={<ArrowUpRight className="text-white w-full h-full" />}
        variant={
          totalNetProfit > 0 ? "green" : totalNetProfit < 0 ? "red" : "gray"
        }
        subtitle={netSubtitle}
        trend={getTrend(totalNetProfit)}
        trendValue={getTrendMessage(totalNetProfit, netTrend)}
        emptyMessage={isPersonalMode ? "No savings yet" : "No net earnings yet"}
        infoText={netInfo}
      />
      <StatCard
        title={capitalLabel}
        value={formatCurrency(companyCapital)}
        icon={<Banknote className="text-white w-full h-full" />}
        variant={companyCapital > 0 ? "blue" : "gray"}
        subtitle={capitalSubtitle}
        trend={getTrend(companyCapital)}
        trendValue={
          companyCapital > 0
            ? `${capitalTrend} available`
            : `No ${capitalTrend.toLowerCase()} available`
        }
        emptyMessage={`No ${capitalTrend.toLowerCase()} available`}
        infoText={capitalInfo}
      />
      {donationEnabled && (
        <StatCard
          title={isPersonalMode ? "Charity Fund" : "Donations Fund"}
          value={formatCurrency(availableDonationsFund)}
          icon={<HeartHandshake className="text-white w-full h-full" />}
          variant={availableDonationsFund > 0 ? "pink" : "gray"}
          subtitle={isPersonalMode ? "For charity" : "For donations"}
          trend={getTrend(availableDonationsFund)}
          trendValue={
            availableDonationsFund > 0 ? "Funds available" : "No donation funds"
          }
          emptyMessage="No donation funds available"
          infoText={donationInfo}
        />
      )}
      <LoanCard
        loan={loan}
        deficitPartners={deficitPartners}
        isPersonalMode={isPersonalMode}
      />
    </div>
  );
};
